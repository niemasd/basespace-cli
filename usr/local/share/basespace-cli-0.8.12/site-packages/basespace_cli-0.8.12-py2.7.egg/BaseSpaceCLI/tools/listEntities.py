#
# Copyright (c) 2015 Illumina, Inc.
#
# This software is provided under the terms and conditions of the
# Illumina Open Source Software License 1.
#
# You should have received a copy of the Illumina Open Source
# Software License 1 along with this program. If not, see
# <https://github.com/sequencing/licenses/>
#

"""
List entity types from BaseSpace.

Provides a common set of tools for listing; used by list samples, list projects, list appresults

"""
import argparse
import logging
import abc
from BaseSpacePy.model.QueryParameters import QueryParameters as qp
from ..common.interface import InternalCommand, InternalListerCommand

from ..common.entities import all_entities, entity_extractor_factory, EntityException
from ..common.interface import InternalListerCommand



class ListEntities(InternalListerCommand):
    """list BaseSpace entities"""

    __category__ = "Creating and listing"

    def __init__(self, app, app_args, cmd_name=None):
        super(ListEntities, self).__init__(app, app_args, self.__class__.__name__)
        return

    def _validate_arguments(self, parsed_args):
        if len(parsed_args.entities) >= 2 and 'apps' in parsed_args.entities:
            raise EntityException("Cannot specify apps with other entities")
        if len(parsed_args.entities) > 2 or (len(parsed_args.entities) == 2 and not 'projects' in parsed_args.entities):
            raise EntityException("Cannot specify more than one of (samples, appresults, appsessions)")
        # if self.app.options.terse:
        #     if len(parsed_args.entities) > 1:
        #         raise EntityException("Cannot specify terse with multiple entity listing")

    def get_parser(self, prog_name):
        parser = super(ListEntities, self).get_parser(prog_name)
        parser.add_argument('entities',
                            metavar='entity',
                            nargs='+',
                            choices=all_entities,
                            help= "S|which entities to list. Valid options are:\n%r" % all_entities )
        # if project-name has already been added don't add it
        # this is to allow some list entities commands to suppress project-name option passing
        if not [ action for action in parser._actions if action.dest=='project_name' ]:
            parser.add_argument('--project-name', help='select on project name (by glob)')
        return parser


    def take_action(self, parsed_args):
        self._validate_arguments(parsed_args)
        if self.app.options.terse:
            # this is a bit of a hack,
            # because I can't inject the formatter decision up high enough to get this selected properly
            self.formatter = self._formatter_plugins["value"].obj
        entity_extractor = entity_extractor_factory(parsed_args, self.app.options, self.api, self.app.config_path)
        return entity_extractor.get_header_and_entries()
