#!/usr/bin/env python2.7
#
# Copyright (c) 2015 Illumina, Inc.
#
# This software is provided under the terms and conditions of the
# Illumina Open Source Software License 1.
#
# You should have received a copy of the Illumina Open Source
# Software License 1 along with this program. If not, see
# <https://github.com/sequencing/licenses/> 
#


"""
Annotates a BaseSpace sample.

"""

import json

from BaseSpacePy.model.QueryParameters import QueryParameters as qp
from BaseSpacePy.api.BaseSpaceException import RestMethodException, ServerResponseException

from .. import __version__
from ..common.meta_config_parser import MetaConfigParser
from ..common.interface import InternalCommand


class AnnotateSample(InternalCommand):
    "set properties of a BaseSpace sample."

    __category__ = "Creating and listing"

    def __init__(self, app, app_args, cmd_name=None):
        super(AnnotateSample, self).__init__(app, app_args, self.__class__.__name__)
        return

    def get_parser(self, prog_name):
        parser = super(AnnotateSample, self).get_parser(prog_name)
        parser.add_argument('property', nargs='+',
                            help="If option is prefixed with an @, it's a file (or process substitution with <() ) "
                                 "so we should read inputs from there. Otherwise, use as many KEY:VALUE as needed.")
        required = parser.add_argument_group('required arguments')
        required.add_argument('-i', '--id', type=str, dest="sample_id", required=True,
                                    help="The BaseSpace Id of the Sample")
        parser.add_argument('-n', '--namespace', type=str, dest="namespace", required=False, default="BaseSpaceCLI",
                                  help="grouping by namespace")
        return parser

    def take_action(self, parsed_args):
        try: 
            sample = self.api.getSampleById( parsed_args.sample_id, qp({'Limit':1024}) )
        except ServerResponseException, e:
            self.log.error(e)
            return 1

        config = MetaConfigParser(parsed_args.namespace)
        properties = {}

        self.log.debug("... raw properties: %s" % parsed_args.property)
        for a in parsed_args.property:
            if a.startswith("@"):
                config.read(a[1:])
                for s in config.sections():
                    if not s in properties:
                        properties[s] = {}
                    properties[s].update( [(k,v) for (k,v) in config.items(s)] )
            else:
                kv = a.split(':')
                if len(kv) != 2:
                    raise Exception("The argument '%s' is not a recognized KEY:VALUE property" % a)
                if not parsed_args.namespace in properties:
                    properties[parsed_args.namespace] = {}
                properties[parsed_args.namespace].update( [(kv)] )

        self.log.debug("... recognized %d properties" % len(properties))
        if properties:
            if self.app.options.dry_run:
                self.log.info("Would have annotated sample '%s' (ID=%s) as follows..." % (sample,parsed_args.sample_id))
                self.log.info(json.dumps(properties, sort_keys=True, indent=4, separators=(",", ': ')))
            else:
                for grp in properties:
                    self.api.setResourceProperties("samples",parsed_args.sample_id,properties[grp],grp)
                    self.log.info("    Successfully set %d properties in namespace '%s'" % (len(properties[grp]), grp))

