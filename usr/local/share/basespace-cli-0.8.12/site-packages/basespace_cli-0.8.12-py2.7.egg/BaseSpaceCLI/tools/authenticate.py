
import os
import sys
import pkgutil

from BaseSpacePy.api.AuthenticationAPI import OAuthAuthentication, SessionAuthentication, AuthenticationScopeException
from BaseSpacePy.api.BaseSpaceException import CredentialsException, OAuthException

from ..common.interface import InternalCommand


class Authenticate(InternalCommand):
    "obtain credentials for the BaseSpaceCLI tools to use"
    CLIENT_ID = "ca2e493333b044a18d65385afaf8eb5d"
    CLIENT_SECRET = "282b0f7d4e5d48dfabc7cdfe5b3156a6"
    DEFAULT_API_SERVER = "https://api.basespace.illumina.com/"
    DEFAULT_API_VERSION = "v1pre3"

    DEFAULT_SCOPES = [
        "CREATE GLOBAL",
        "BROWSE GLOBAL",
        "CREATE PROJECTS",
        "READ GLOBAL",
        "START APPLICATIONS",
        "MOVETOTRASH GLOBAL",
        "AUDIT USER"
    ]

    __category__ = "Credentials"

    def __init__(self, app, app_args, cmd_name=None):
        try:
            super(Authenticate, self).__init__(app, app_args, self.__class__.__name__, declare_api=False)
        except CredentialsException:
            pass
        return

    def get_parser(self, prog_name):
        parser = super(Authenticate, self).get_parser(prog_name)
        parser.add_argument('--api-server', type=str, dest="api_server", default=self.DEFAULT_API_SERVER,
                            help='URI of API server')
        parser.add_argument('--api-version', type=str, dest="api_version", default=self.DEFAULT_API_VERSION,
                            help='api version')
        # parser.add_argument('-s', '--sessiontoken', type=str, dest="sessiontoken", default=False, action="store_true",
        #                     help='get a session token instead of an access token')
        parser.add_argument('--force', default=False, action="store_true",
                            help="force overwrite of existing config file")
        parser.add_argument('--scopes', default=",".join(self.DEFAULT_SCOPES),
                            help="comma-separated set of scopes to request")
        parser.add_argument('--client-id', default=self.CLIENT_ID,
                            help="client ID to use for authentication")
        parser.add_argument('--client-secret', default=self.CLIENT_SECRET,
                            help="client secret to use for authentication")
        return parser

    def take_action(self, parsed_args):
        # if parsed_args.sessiontoken:
        #     sa = SessionAuthentication(config_path)
        #     sa.set_session_details()
        # else:
        if parsed_args.api_server[-1] != '/':
            parsed_args.api_server += '/'
        try:
            if os.path.exists(self.app.config_path):
                if parsed_args.force:
                    self.log.info( "removing config: (%s)" % self.app.config_path)
                    os.remove(self.app.config_path)
                else:
                    self.log.error( "config path already exists; not overwriting (%s). Overwrite with --force" % self.app.config_path )
                    return 1

            oaa = OAuthAuthentication(self.app.config_path, parsed_args.api_server, parsed_args.api_version)
            scopes = parsed_args.scopes.split(",")
            while scopes:
                try:
                    oaa.set_oauth_details(parsed_args.client_id, parsed_args.client_secret, scopes)
                    break
                except AuthenticationScopeException:
                    self.log.warn("could not obtain %s scope in %s" % (scopes[-1], parsed_args.api_server))
                    scopes = scopes[:-1]
            if not scopes:
                raise OAuthException("authentication failed to obtain any scopes")
        except Exception as e:
            raise OAuthException("authentication failed (%s)" % str(e))
