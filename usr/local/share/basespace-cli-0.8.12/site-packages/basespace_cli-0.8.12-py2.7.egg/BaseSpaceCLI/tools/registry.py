#
# Copyright (c) 2015 Illumina, Inc.
#
# This software is provided under the terms and conditions of the
# Illumina Open Source Software License 1.
#
# You should have received a copy of the Illumina Open Source
# Software License 1 along with this program. If not, see
# <https://github.com/sequencing/licenses/> 
#

"""
Support for 3rd party applications.

"""

import os
import json

from .. import __version__
from ..common.interface import InternalCommand,ExternalCommand
from ..common.plugin_manager import PluginManager
from ..common.parsers import RegistryParser


class ThirdParty(ExternalCommand):
    "* this is a third-party tool *"

    def __init__(self, app, app_args, cmd_name=None):
        cmd = []
        if self.path:
            cmd = [ self.path ]

        super(ThirdParty, self).__init__( cmd, app, app_args, self.__class__.__name__ )
        return


class RegistryException(Exception):
    def __init__(self, value):
        self.parameter = 'Registration Error: ' + value

    def __str__(self):
        return repr(self.parameter)


def validate_name(name):
    words = name.split()
    if len(words) > 1:
        raise RegistryException( "Command name must be a single word, %d provided" % len(words) )
    return name


class Register(InternalCommand):
    "register a BaseSpaceCLI tool"

    __category__ = "Configuration"

    def __init__(self, app, app_args, cmd_name=None):
        super(Register, self).__init__( app, app_args, self.__class__.__name__, declare_api=False )
        return

    def get_parser(self, prog_name):
        parser = RegistryParser(
            description=self.get_description(),
            prog=prog_name,
        )
        parser.add_argument('name', help="command name")
        parser.add_argument('-p', '--path', type=str, dest="path", required=True,
                                            help="path to executable")
        parser.add_argument('-d', '--description', type=str, dest="desc", required=False,
                                                   help="one-line description")
        parser.add_argument('-g', '--group', type=str, dest="group", default="third party",
                                             choices=parser.forbidden, metavar='GROUP',
                                             help="name of the group for bundling the tools")
        parser.add_argument('--force', action='store_true', dest="force", required=False, default=False,
                                       help='overwrite the registration of a tool, if this already exists')
        return parser

    def take_action(self, parsed_args):
        grp = parsed_args.group
        name = validate_name(parsed_args.name)
        pm = PluginManager(self.app.config_path)

        if not self.app.options.dry_run:
            plugins = pm.load()
            if (grp in plugins) and (name in plugins[grp]) and (plugins[grp][name]):
                if parsed_args.force:
                    self.log.warning( "Overwriting entry for '%s'", name )
                else:
                    raise RegistryException( "Cannot overwrite entry for '%s'. You may wish to consider using --force" % name )

        entry = {}
        entry['path'] = parsed_args.path
        if parsed_args.desc:
            entry['description'] = parsed_args.desc

        if self.app.options.dry_run:
            self.log.info( json.dumps({grp:{name:entry}}, sort_keys=True, indent=4) )
        else:
            try:
                plugins[grp][name] = entry
            except KeyError:
                plugins[grp] = {}
                plugins[grp][name] = entry
            pm.save(plugins)
            self.log.info( "Successfully registered '%s'", name )


class Unregister(InternalCommand):
    "delete one or more BaseSpaceCLI tool from the registry"

    __category__ = "Configuration"

    def __init__(self, app, app_args, cmd_name=None):
        super(Unregister, self).__init__( app, app_args, self.__class__.__name__, declare_api=False )
        return

    def get_parser(self, prog_name):
        parser = RegistryParser(
            description=self.get_description(),
            prog=prog_name,
        )
        parser.add_argument('names', nargs='+', help="command names")
        parser.add_argument('-g', '--group', type=str, dest="group", default="third party",
                                             choices=parser.forbidden, metavar='GROUP',
                                             help="name of the group for bundling the tools")
        return parser

    def take_action(self, parsed_args):
        grp = parsed_args.group
        pm = PluginManager(self.app.config_path)
        plugins = pm.load()
        count = 0
        try:
            count = len(plugins[grp])
            for name in parsed_args.names:
                del plugins[grp][name]
        except KeyError:
            pass
        pm.save(plugins)
        if count > 0:
            diff = count - len(plugins[grp])
            if diff > 0:
                self.log.info( "Successfully deleted %d entries from the registry" % diff )
            else:
                self.log.info( "The following tools have never been registered: %s. No need to unregister" % parsed_args.names )
        else:
            self.log.info( "Group '%s' does not exist: No need to unregister" % grp )
