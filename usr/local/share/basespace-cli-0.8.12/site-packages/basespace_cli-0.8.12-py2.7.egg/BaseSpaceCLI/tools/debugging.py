
from ..common.interface import InternalCommand


class Print(InternalCommand):
    "prints a message."

    def get_parser(self, prog_name):
        parser = super(Print, self).get_parser(prog_name)
        parser.add_argument('msg',
                            nargs='*',
                            help='message',
                            )
        return parser

    def take_action(self, parsed_args):
        if parsed_args.msg:
            self.log.debug("...this command %s" % self.get_description())
            self.log.info(" ".join(parsed_args.msg))
            cnt = len(parsed_args.msg)
            self.log.debug("...printing %d word%s" % (cnt,("s" if cnt else "")))
        else:
            self.app.stdout.write("No message given! Please run again and provide an argument this time!\n")


class Error(InternalCommand):
    "always raises an error"

    def take_action(self, parsed_args):
        self.log.info("I smell trouble...")
        self.log.debug("... %s is shutting down!" % self.__class__.__name__)
        raise Exception("this is the expected exception")
