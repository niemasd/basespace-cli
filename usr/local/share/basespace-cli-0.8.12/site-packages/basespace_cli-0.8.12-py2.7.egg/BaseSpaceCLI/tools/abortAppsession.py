import pkgutil
import os

from ..common.interface import InternalCommand
from .. import __log_terse_level__

from BaseSpacePy.api.BaseMountInterface import BaseMountInterface

class AbortAppSessionException(Exception):
    pass

class AbortAppsession(InternalCommand):
    "abort running appsessions."

    SET_STATUS="Aborted"
    BAD_STATUSES=["Aborted", "Complete"]

    __category__ = "Apps"

    def get_parser(self, prog_name):
        parser = super(AbortAppsession, self).get_parser(prog_name)

        parser.add_argument('appsession', nargs="+", help="appsessions to abort - use either IDs or BaseMount paths")
        return parser

    def take_action(self, parsed_args):
        message = "Aborted by: %s" % self.full_name
        for appsession in parsed_args.appsession:
            try:
                id_ = str(int(appsession))
            except ValueError:
                if not os.path.exists(appsession):
                    raise AbortAppSessionException("input does not look like an appsession ID or BaseMount path: %s" % appsession)
                bmi = BaseMountInterface(appsession)
                id_ = bmi.id
            try:
                existing_appsession = self.api.getAppSessionById(id_)
            except Exception as e:
                raise AbortAppSessionException("unable to find appsession: %s" % id_)
            current_status = existing_appsession.Status
            if current_status in self.BAD_STATUSES:
                raise AbortAppSessionException("appsession %s in inappropriate state to be killed (%s)" % (id_, current_status))
            try:
                self.api.stopAppSession(id_)
                if self.app.options.terse:
                    self.log.log(__log_terse_level__, "%s" % id_)
                self.log.info("Killed: %s" % id_)
            except Exception as e:
                self.log.warn("Unable to abort appsession: %s (%s)" % (id_, str(e)))
