import Queue
import threading


class IoStreams():
    io_q = Queue.Queue(5)
    active = 0

    def __init__(self, proc):
        threading.Thread(target=self.read_from_stream, name='stdout-stream', args=('STDOUT', proc.stdout)).start()
        self.active += 1
        threading.Thread(target=self.read_from_stream, name='stderr-stream', args=('STDERR', proc.stderr)).start()
        self.active += 1


    def read_from_stream(self, id, stream):
        if not stream:
            #print('%s does not exist' % identifier)
            self.io_q.put(('EXIT', id))
            return
        for line in stream:
            self.io_q.put((id, line))
        if not stream.closed:
            stream.close()
        #print('%s is done' % identifier)
        self.io_q.put(('EXIT', id))


    def get(self):
        return self.io_q.get(True, 1)

    def empty(self):
        return Queue.Empty

    def is_out(self,id):
        return id == 'STDOUT'

    def is_err(self,id):
        return id == 'STDERR'

    def all_closed(self,id):
        if id == 'EXIT':
            self.active -= 1
        return (self.active == 0)
