import os
import gzip
import itertools
import re


class FastqReadException(Exception):
    def __init__(self, value):
        self.parameter = 'Error reading from FASTQ: ' + value

    def __str__(self):
        return repr(self.parameter)


SAMPLE_RE = "^[a-zA-Z0-9-]+$"
SAMPLE_NUMBER_RE = "^S\d+$"
LANE_RE = "^L\d\d\d$"
READ_RE = "^R([12])$"
FLOWCELL_RE = "^\d\d\d$"

class Fastq(object):
    def __init__(self, path, allow_invalid_readnames=False):
        self.path = path
        self.filename = os.path.basename(path)
        self.read_num = ""
        self.file_sample_name = ""
        self.count = 0
        self.read_length = 0
        self.parse_filename()
        self.allow_invalid_readnames = allow_invalid_readnames

    @staticmethod
    def get_file_pieces(file_base):
        file_base_pieces = file_base.split("_")
        # we have to do this backwards because the sample name might contain underscores
        flowcell_index = file_base_pieces[-1]
        read = file_base_pieces[-2]
        lane = file_base_pieces[-3]
        sample_number = file_base_pieces[-4]
        sample_name = "_".join(file_base_pieces[:-4])
        return sample_name, sample_number, lane, read, flowcell_index

    def get_filename_with_samplename(self, sample_name):
        # assumes a valid filename
        file_parts = self.filename.split(".")
        file_base = ".".join(file_parts[:-2])
        old_sample_name, sample_number, lane, read, flowcell_index = self.get_file_pieces(file_base)
        return "%s.fastq.gz" % "_".join([sample_name, sample_number, lane, read, flowcell_index])

    def parse_filename(self):
        if not os.path.exists(self.path):
            raise FastqReadException("File does not exist: %s" % self.path)
        try:
            file_parts = self.filename.split(".")
        except ValueError:
            raise FastqReadException("File does not have proper extensions - should be .fastq.gz: %s" % self.path)
        if len(file_parts) < 3:
            raise FastqReadException("File does not have proper extensions - should be .fastq.gz: %s" % self.path)
        if file_parts[-1] != "gz" and file_parts[-2] != "fastq":
            raise FastqReadException("File does not have proper extensions: %s" % self.path)
        # we have to rejoin it with dots in case there are dots in the other parts of the filename
        file_base = ".".join(file_parts[:-2])
        try:
            sample_name, sample_number, lane, read, flowcell_index = self.get_file_pieces(file_base)
        except IndexError:
            raise FastqReadException("Filename does not have the right pieces: %s" % self.path)
        self.file_sample_name = sample_name
        if not re.match(SAMPLE_RE, sample_name):
            raise FastqReadException("Sample name is not properly specified: %s (should match: %s)" % (sample_name, SAMPLE_RE))
        if not re.match(SAMPLE_NUMBER_RE, sample_number):
            raise FastqReadException("Sample number is not properly specified: %s (should match: %s)" % (sample_number, SAMPLE_NUMBER_RE))
        if not re.match(LANE_RE, lane):
            raise FastqReadException("Lane name is not properly specified: %s (should match: %s)" % (lane, LANE_RE))
        if not re.match(FLOWCELL_RE, flowcell_index):
            raise FastqReadException("Flowcell index is not properly specified: %s (should match: %s)" % (flowcell_index, FLOWCELL_RE))
        read_num_obj = re.match(READ_RE, read)
        if read_num_obj:
            self.read_num = read_num_obj.group(1)
        else:
            raise FastqReadException("Read name is not properly specified: %s (should match: %s)" % (read, READ_RE))

    def validate_read_name(self, read_name):
        if self.allow_invalid_readnames:
            return read_name
        try:
            first, second = read_name.split(" ")
            match_across_reads = first.split(":")
            instrument, run_id, flowcell_id, lane, tile, x, y = match_across_reads[:7]
            umi = ""
            if len(match_across_reads) == 8:
                umi = match_across_reads[7]
            read_num, filterflag, zero, samplenumber = second.split(":")
        except ValueError as e:
            raise FastqReadException("Read name does not match expected format: %s" % read_name)
        if not instrument[0] == "@":
            raise FastqReadException("Read name should start with an @ symbol: %s" % read_name)
        if read_num != self.read_num:
            raise FastqReadException("Read in file does not match read in filename: %s" % read_name)
        if filterflag != "N":
            raise FastqReadException("Fastq files contains non-PF reads: %s" % read_name)
        return first

    def get_reads(self):
        fh = gzip.open(self.path)
        # to start the loop
        read_name = True
        while read_name:
            read_name = fh.readline()
            bases = fh.readline()
            plus = fh.readline()
            qualities = fh.readline()
            if not read_name:
                if bases or plus or qualities:
                    raise FastqReadException("malformed fastq file: content after blank read name")
                else:
                    break
            if bases == "" or qualities == "":
                raise FastqReadException("malformed entry for read: %s" % read_name)
            if len(bases) != len(qualities):
                raise FastqReadException(
                    "Number of bases does not match number of qualities for read: %s" % read_name)
            self.count += 1
            # len(bases)-1 because we have a new-line in there
            self.read_length = max(self.read_length, len(bases) - 1)
            yield self.validate_read_name(read_name)

        fh.close()
