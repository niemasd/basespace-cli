import json
import os

from cliff.commandmanager import EntryPointWrapper


class PluginException(Exception):
    def __init__(self, value):
        self.parameter = 'Plugin Error: ' + value

    def __str__(self):
        return repr(self.parameter)


class Plugin(EntryPointWrapper):
    """extend the EntryPointWrapper to include a path to an executable, and a doc string"""

    def __init__(self, name, command_class, path=None, desc=None, visible=False):
        super(Plugin,self).__init__(name,command_class)
        self.path = path
        self.desc = desc
        self.visible = visible

    def load(self, require=False):
        # override attributes at runtime
        if self.path:
            self.command_class.path = self.path
        return super(Plugin,self).load(require)

    def get_path(self):
        return self.path

    def get_description(self,cmd):
        return (self.desc if self.desc else cmd.get_description())

    def get_category(self):
        return self.command_class.__category__ if hasattr(self.command_class, "__category__") else ""

    def make_visible(self):
        self.visible = True

    def is_visible(self):
        return self.visible

    def __str__(self):
        s = "%s = %s:%s" % (self.name, self.command_class.__module__, self.command_class.__name__)
        if self.path:
            s += ' [%s]' %  self.path
        return s

    def __repr__(self):
        return "Plugin(%r)" % str(self)


class PluginManager(object):

    def __init__(self, config_path):
        if not config_path:
            raise PluginException("Path to config file not defined")
        self.config_file = os.path.splitext(config_path)[0] + "-plugins.json"

        if not os.path.exists(self.config_file):
            with open(self.config_file,'w') as fh:
                json.dump({'third party':{}},fh)


    def load(self):
        try:
            with open(self.config_file,'r') as fh:
                data = json.load(fh)
        except Exception as e:
            raise PluginException("Cannot load plugins from '%s': %s" % (self.config_file, str(e)))
        return data

    def save(self, data):
        try:
            with open(self.config_file,'w') as fh:
                json.dump(data,fh)
        except Exception as e:
            raise PluginException("Cannot write plugins configuration into '%s': %s" % (self.config_file, str(e)))
