import sys
import logging
import traceback

import os

from BaseSpacePy.api.BaseSpaceException import *
from BaseSpaceCLI.common.core import CLI


def display_exc_long(log, err):
    src,line_num,_,_ = traceback.extract_tb( sys.exc_info()[2] )[-1]  # last element in stack
    log.error("%s caught in '%s:%s'" , err.__class__.__name__, src, line_num, exc_info=True)
    #sys.stderr.write("\n")
    #sys.stderr.write("%s%s\n" % (' ' * 10, err))

def display_exc_short(log, err):
    if err.__class__.__name__ == "KeyboardInterrupt":
        sys.stderr.write("\n")
    else:
        log.error("%s: %s" , err.__class__.__name__, err)


def main(argv=sys.argv[1:]):
    log = logging.getLogger(__name__)

    error_display = display_exc_long if ("--debug" in argv) else display_exc_short

    arg_list = []
    for arg in argv:
        try:
            if len(arg)>1 and arg[0]=='-' and arg[1]!='-':
                for a in arg[1:]:
                    arg_list.append("-%s" % a)
            else:
                arg_list.append(arg)
        except TypeError:
            arg_list.append(arg)

    try:
        bsCLI = CLI()
        status = bsCLI.run(arg_list)
        if status:
            log.debug("non-zero exit code: %d" % status)
            if bsCLI.exc_info:
                log.debug("    + type:      %s" % bsCLI.exc_info[0])
                log.debug("    + value:     %s" % bsCLI.exc_info[1])
                log.debug("    + traceback: %s" % bsCLI.exc_info[2])
                raise bsCLI.exc_info[0], bsCLI.exc_info[1], bsCLI.exc_info[2]

    except ServerResponseException as e:
        status = 255
    except CredentialsException as e:
        # this one needs to be reported here, because it happens before the command takes place
        # and therefore Cliff will not log the error
        error_display(log,e)
        status = 255
    except KeyboardInterrupt as e:
        error_display(log,e)
        status = 255
    except Exception as e:
        status = 255

    return status


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
